ICON = 'icon-default.jpg'
METADATA_URL = 'http://api.contents.watchabc.go.com/vp2/ws/s/contents/3000/videos/002/001/-1/-1/-1/%s/-1/-1.json'
ENTITLEMENT_URL = 'http://api.entitlement.watchabc.go.com/vp2/ws-secure/entitlement/2020/authorize.json'

HTTP_HEADERS = {
	'User-Agent': 'ABCFamily/4.2.1 (iPad; iOS 10.2.1; Scale/2.00)'
}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	video_id = url.split('://')[-1]
	json_obj = JSON.ObjectFromURL(METADATA_URL % (video_id), headers=HTTP_HEADERS)

	date = json_obj['video'][0]['airdates']['airdate'][0]
	date = Datetime.ParseDate(date).date()

	return EpisodeObject(
		show = json_obj['video'][0]['show']['title'],
		title = json_obj['video'][0]['title'],
		summary = json_obj['video'][0]['longdescription'],
		duration = int(json_obj['video'][0]['duration']['value']),
		content_rating = json_obj['video'][0]['tvrating']['rating'],
		originally_available_at = date,
		season = int(json_obj['video'][0]['season']['num']),
		index = int(json_obj['video'][0]['episodenumber']),
		thumb = Resource.ContentsOfURLWithFallback(url=json_obj['video'][0]['thumbnails']['thumbnail'][-1]['value'], fallback=ICON)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_resolution = 720,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [
				PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	video_id = url.split('://')[-1]
	json_obj = JSON.ObjectFromURL(METADATA_URL % (video_id), headers=HTTP_HEADERS)

	# Some videos have a MOV and m3u8 asset, so we need to make sure we pull the m3u8 asset
	m3u8_base_url = None

	for asset in json_obj['video'][0]['assets']['asset']:

		if asset['value'].endswith('.m3u8'):
			m3u8_base_url = asset['value']
			break

	if not m3u8_base_url:
		raise Ex.MediaNotAvailable

	post_values = {
		'video_id': video_id,
		'video_type': 'lf',
		'brand': '002',
		'device': '002'
	}

	json_obj = JSON.ObjectFromURL(ENTITLEMENT_URL, values=post_values, headers=HTTP_HEADERS)

	try:
		session_key = json_obj['uplynkData']['sessionKey']
	except:
		Log('Unable to get session key. Content of authorization is %s' % (HTTP.Request(ENTITLEMENT_URL, values=post_values, headers=HTTP_HEADERS).content))
		raise Ex.MediaNotAvailable

	video_url = '%s?%s' % (m3u8_base_url, session_key)

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))
